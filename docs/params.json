{"name":"Python examples","tagline":"A collection of python examples that showcase some libraries and practical functions of Python. ","body":"ï»¿# Python Examples\r\n\r\n### Python installation to use these examples\r\nThese examples require several python packages that are included in the basic anaconda installation. \r\nTo install anaconda for your platform, you can go the [Anaconda Download](https://www.anaconda.com/distribution/). \r\nIt is best to install Python 3 rather than 2 because 2 will no longer be supported after January 1st, 2020.\r\n\r\n### Using `ctypes` to interface with C and Fortran from Python\r\nThe code for this example is under the ctypes_ex folder. \r\nIntel compilers were used to create the linux and windows libraries (x64 architecture). \r\n\r\nIn linux, the librarys are called shared objects and have a `.so` extension. The `makefile` shows how the libraries were compiled. \r\n\r\nIn windows, the librarys are called dynamically linked libraries (DLL) and have a `.dll` extension. There are instructions in the README.md file that explain how the DLLs were compiled. \r\n\r\n\r\nThe python packages required for this example are:  \r\n- ctypes \r\n- numpy\r\n- time\r\n\r\n### Using `PyQt5` to make a simple GUI in Python\r\nThe code for this example is under the econ_gui folder. \r\nThis folder contains an `environment.yml` file that can be used to create a conda environment suitable for this example.\r\nTo create the environment, type the following into your command line from the econ_gui directory:  \r\n    `conda env create -f environment.yml` \r\n\r\nTo run the interface, execure the following commands from the command line in the econ_gui directory:  \r\n    `conda activate qt-env`  \r\n    `python econ_gui.py`  \r\n\r\n### Fitting linear models to data and plotting results with Python\r\nThe code for this example is under the py_fit_example folder.\r\nIf you have installed python through anaconda, the packages required in this example will already be installed. \r\nThis code can be run with an interactive interpreter in Visual Studio Code (VS Code) or exectuted from the command line.\r\nIf ran from the command line there will be a lot of output. \r\n\r\n### Optimization - Building algebraic models in Python using Pyomo\r\nThe code for this example is under the pyomo_opt folder. \r\nPyomo is a Python library built and maintained at Sandia National Labs.\r\nIt is designed to allow users to create optimization models with python code and pyomo classes. \r\nI have used this extensively and it is a very popular, powerful package. It will interface with most commercial and open source solvers. \r\nThe `mixed_product.dat` file contains the data read in by the abstract model created by the `mixed_product_func.py`.\r\nThe `mixed_product.py` file creates and solves a concrete model that does not need a data file. \r\nTo use this example you will need to have a mathematical solver installed. These files assume that Gurobi is installed and available for use.\r\nYou will also need to install pyomo using the following command:  \r\n    `conda install pyomo`\r\n\r\n### Using Google Sheets API to Automatically Create Visualizations\r\nThe code for this example is under the gsheets folder.\r\n\r\nYou can use the environment YAML file to create a conda environment to run this code similar to the one in the PyQt5 section.\r\n\r\n\r\nGoogle provides a python api to Google Sheets. This api allows users to read, write, and update spreadsheets from python. \r\nThis can be useful in many scenarios including:\r\n\r\n* storing data when you do not want to use a database or do not want to store it locally\r\n* creating visualization dashboards that automatically update\r\n* automatically sharing data with others\r\n\r\nThis example goes through the process of generating data and pushing it to your google sheet.\r\n\r\n### Open Weather API Example\r\nThis example pulls 5-day 4-hour forecasted weather data from the Open Weather API and then plots temperature, feels like temperature, and humidity. It serves to demonstrate the ease at which one may pull data from websites if they provide a web API. The `requests` package used here can be used for many other purposes, for example web scraping data that is posted as text files on the internet (e.g. USGS). There are directions for obtaining the API key required for these example in the README.md file in the example folder. \r\n\r\n### Itertools examples\r\nIn the itertools_ex folder there is an example of `cycle`. Cycle is a Python function that creates an endless iterator of its input. \r\nIn this example it is used to create a waiting spinner, however it has many more practical uses. \r\nI plan to continue to update this folder with itertools examples because they unlock some really interesting functionality of Python.\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}